import subprocess
from datetime import datetime

configfile: os.path.join(workflow.basedir, "cdot_transcripts.yaml")

cdot_json = os.path.join(workflow.basedir, "cdot_json.py")
cdot_dir = os.path.dirname(workflow.basedir)
cdot_output_raw = subprocess.check_output(f"{cdot_json} --version", shell=True, env={"PYTHONPATH": cdot_dir})
cdot_data_version = cdot_output_raw.decode().strip()

def get_cdot_command(wildcards):
    url = urls[wildcards.name]
    cdot_command = "gff_to_json" if url.endswith(".gff.gz") else "gtf_to_json"
    return cdot_command


# Name it based on date as it may vary
today = datetime.now().date().isoformat()
gene_info_download_filename = f"Homo_sapiens.gene_info.{today}.gz"
gene_info_json = f"Homo_sapiens.gene-info-{cdot_data_version}.json.gz"

genome_build_files = []
for annotation_consortium, builds in config["config"].items():
    for genome_build in builds:
        filename = os.path.join(annotation_consortium, genome_build, f"cdot-{cdot_data_version}-{annotation_consortium}.{genome_build}.json.gz")
        genome_build_files.append(filename)

rule all:
    input:
        gene_info_json,
        # genome_build_files,
        expand("{annotation_consortium}/{genome_build}/cdot-{cdot_data_version}-{annotation_consortium}.{genome_build}.json.gz",
               annotation_consortium=["RefSeq", "Ensembl"],
               genome_build=["GRCh37", "GRCh38", "T2T-CHM13v2.0"],
               cdot_data_version=[cdot_data_version])

rule cdot_build_json:
    # Merges all GFFs per build
    output:
        "{annotation_consortium}/{genome_build}/cdot-{cdot_data_version}-{annotation_consortium}.{genome_build}.json.gz"
    input:
        lambda wildcards: expand("{annotation_consortium}/{genome_build}/cdot-{cdot_data_version}-{name}.json.gz", name=wildcards.urls)
    params:
        urls = lambda wildcards: config[wildcards.annotation_consortium][wildcards.genome_build]
    shell:
        """
            PYTHONPATH={cdot_dir} \
            {cdot_json} \
                combine_builds \
                {input} \
                #--grch37 GRCh37/cdot-${CDOT_DATA_VERSION}.refseq.grch37.json.gz \
                #--grch38 GRCh38/cdot-${CDOT_DATA_VERSION}.refseq.grch38.json.gz \
                --output ${output}
        """


rule cdot_gff_json:
    # Individual GFF
    input:
        gene_info_json=gene_info_json,
        gff_file="downloads/{name}.gz"
    output:
        protected("{annotation_consortium}/{genome_build}/cdot-{cdot_data_version}-{name}.json.gz")
    params:
        url=lambda wildcards: urls[wildcards.name],
        cdot_command=get_cdot_command
    shell:
        """
            PYTHONPATH={cdot_dir} \
            {cdot_json} \
                {params.cdot_command} \
                "{input.gff_file}" \
                --url "{params.url}" \
                --genome-build="{genome_build}" \
                --output "{output}" \
                --gene-info-json="{input.gene_info_json}"
        """

rule download_gff_files:
    output:
        # Don't re-download if snakemake script changes
        protected("downloads/{name}.gz")
    params:
        url=lambda wildcards: urls[wildcards.name]
    shell:
        "curl -o {output} {params.url}"


rule process_gene_info_json:
    input:
        "downloads/gene_info/{gene_info_download_filename}"
    output:
        protected("downloads/{gene_info_download_filename}")
    shell:
        """
            PYTHONPATH={cdot_dir} \
            "{workflow.basedir}/cdot_gene_info.py" \
                --gene-info {input} \
                --output {output} \
                --email cdot@cdot.cc
        """

rule download_gene_info:
    output:
        protected("downloads/gene_info/{gene_info_download_filename}")
    shell:
        "curl -o {output} https://ftp.ncbi.nlm.nih.gov/refseq/H_sapiens/Homo_sapiens.gene_info.gz"

